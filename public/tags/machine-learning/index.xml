<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Machine Learning on Jan Kirenz</title>
    <link>https://kirenz.com/tags/machine-learning/</link>
    <description>Recent content in Machine Learning on Jan Kirenz</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Jan Kirenz, {year}</copyright>
    <lastBuildDate>Sat, 19 Dec 2020 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="https://kirenz.com/tags/machine-learning/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Data Science with Tidymodels, Workflows and Recipes</title>
      <link>https://kirenz.com/post/2020-12-19-r-tidymodels-housing/</link>
      <pubDate>Sat, 19 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kirenz.com/post/2020-12-19-r-tidymodels-housing/</guid>
      <description>
&lt;script src=&#34;index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;index_files/anchor-sections/anchor-sections.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;index_files/anchor-sections/anchor-sections.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#data-understanding&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; Data understanding&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#imort-data&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1&lt;/span&gt; Imort Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-overview&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.2&lt;/span&gt; Data overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-exploration&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.3&lt;/span&gt; Data exploration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-preparation&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; Data preparation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#data-splitting&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.1&lt;/span&gt; Data splitting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#recipes&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2&lt;/span&gt; Recipes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#model-building&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; Model building&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#model-specification&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.1&lt;/span&gt; Model specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#create-workflow&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.2&lt;/span&gt; Create workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#evaluate-model&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.3&lt;/span&gt; Evaluate model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#last-fit-and-evaluation&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.4&lt;/span&gt; Last fit and evaluation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;The following examples are adapted from the excellent book “Hands-on machine learning with scikit-learn, keras and tensorflow” from A. Geron and the &lt;a href=&#34;https://www.tidymodels.org/start/recipes/&#34;&gt;tidymodels documentation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In this tutorial you will learn how to specify a simple regression model with the tidymodels package using recipes, which is designed to help you preprocess your data before training your model.&lt;/p&gt;
&lt;p&gt;To use the code in this article, you will need to install the following packages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tidyverse.org/&#34;&gt;tidyverse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tidymodels.org/&#34;&gt;tidymodels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/skimr/vignettes/skimr.html&#34;&gt;skimr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ggobi.github.io/ggally/index.html&#34;&gt;GGally&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dkahle/ggmap&#34;&gt;ggmap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(tidymodels)
library(skimr)
library(GGally)
library(ggmap)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, our goal is to build a model of housing prices in California. In particular, the model should learn from California census data and be able to predict the median house price in any district (population of 600 to 3000 people), given some predictor variables. We use the root mean square error (RMSE) as a performance measure for our regression problem.&lt;/p&gt;
&lt;div id=&#34;data-understanding&#34; class=&#34;section level1&#34; number=&#34;1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; Data understanding&lt;/h1&gt;
&lt;p&gt;In Data Understanding, we first&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Import data&lt;/li&gt;
&lt;li&gt;Get an overview about the data structure&lt;/li&gt;
&lt;li&gt;Discover and visualize the data to gain insights&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;imort-data&#34; class=&#34;section level2&#34; number=&#34;1.1&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1&lt;/span&gt; Imort Data&lt;/h2&gt;
&lt;p&gt;First of all, let’s import the data:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;LINK &amp;lt;- &amp;quot;https://raw.githubusercontent.com/kirenz/datasets/master/housing.csv&amp;quot;
housing_df &amp;lt;- read_csv(LINK)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;data-overview&#34; class=&#34;section level2&#34; number=&#34;1.2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2&lt;/span&gt; Data overview&lt;/h2&gt;
&lt;p&gt;Next, we take a look at the data structure:&lt;/p&gt;
&lt;p&gt;California census top 4 rows of the DataFrame:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(housing_df, 4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 10
##   longitude latitude housing_median_… total_rooms total_bedrooms population
##       &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;          &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
## 1     -122.     37.9               41         880            129        322
## 2     -122.     37.9               21        7099           1106       2401
## 3     -122.     37.8               52        1467            190        496
## 4     -122.     37.8               52        1274            235        558
## # … with 4 more variables: households &amp;lt;dbl&amp;gt;, median_income &amp;lt;dbl&amp;gt;,
## #   median_house_value &amp;lt;dbl&amp;gt;, ocean_proximity &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Data info:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;glimpse(housing_df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Rows: 20,640
## Columns: 10
## $ longitude          &amp;lt;dbl&amp;gt; -122.23, -122.22, -122.24, -122.25, -122.25, -122.…
## $ latitude           &amp;lt;dbl&amp;gt; 37.88, 37.86, 37.85, 37.85, 37.85, 37.85, 37.84, 3…
## $ housing_median_age &amp;lt;dbl&amp;gt; 41, 21, 52, 52, 52, 52, 52, 52, 42, 52, 52, 52, 52…
## $ total_rooms        &amp;lt;dbl&amp;gt; 880, 7099, 1467, 1274, 1627, 919, 2535, 3104, 2555…
## $ total_bedrooms     &amp;lt;dbl&amp;gt; 129, 1106, 190, 235, 280, 213, 489, 687, 665, 707,…
## $ population         &amp;lt;dbl&amp;gt; 322, 2401, 496, 558, 565, 413, 1094, 1157, 1206, 1…
## $ households         &amp;lt;dbl&amp;gt; 126, 1138, 177, 219, 259, 193, 514, 647, 595, 714,…
## $ median_income      &amp;lt;dbl&amp;gt; 8.3252, 8.3014, 7.2574, 5.6431, 3.8462, 4.0368, 3.…
## $ median_house_value &amp;lt;dbl&amp;gt; 452600, 358500, 352100, 341300, 342200, 269700, 29…
## $ ocean_proximity    &amp;lt;chr&amp;gt; &amp;quot;NEAR BAY&amp;quot;, &amp;quot;NEAR BAY&amp;quot;, &amp;quot;NEAR BAY&amp;quot;, &amp;quot;NEAR BAY&amp;quot;, &amp;quot;N…&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Data summary of numerical and categorical attributes using a function from the package &lt;code&gt;skimr&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;skim(housing_df)&lt;/code&gt;&lt;/pre&gt;
&lt;table style=&#34;width: auto;&#34; class=&#34;table table-condensed&#34;&gt;
&lt;caption&gt;
&lt;span id=&#34;tab:unnamed-chunk-5&#34;&gt;Table 1.1: &lt;/span&gt;Data summary
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Name
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
housing_df
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Number of rows
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
20640
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Number of columns
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
10
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
_______________________
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Column type frequency:
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
character
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
numeric
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
9
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
________________________
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Group variables
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
None
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Variable type: character&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
skim_variable
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
n_missing
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
complete_rate
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
min
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
max
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
empty
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
n_unique
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
whitespace
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
ocean_proximity
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Variable type: numeric&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
skim_variable
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
n_missing
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
complete_rate
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
mean
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
sd
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
p0
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
p25
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
p50
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
p75
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
p100
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
hist
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
longitude
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-119.57
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-124.35
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-121.80
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-118.49
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-118.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-114.31
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
▂▆▃▇▁
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
latitude
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
35.63
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.14
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
32.54
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
33.93
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
34.26
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
37.71
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
41.95
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
▇▁▅▂▁
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
housing_median_age
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
28.64
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12.59
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
29.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
37.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
52.00
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
▃▇▇▇▅
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
total_rooms
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2635.76
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2181.62
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1447.75
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2127.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3148.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
39320.00
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
▇▁▁▁▁
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
total_bedrooms
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
207
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.99
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
537.87
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
421.39
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
296.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
435.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
647.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6445.00
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
▇▁▁▁▁
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
population
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1425.48
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1132.46
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
787.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1166.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1725.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
35682.00
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
▇▁▁▁▁
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
households
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
499.54
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
382.33
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
280.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
409.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
605.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6082.00
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
▇▁▁▁▁
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
median_income
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.87
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.90
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.50
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.56
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.53
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.74
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15.00
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
▇▇▁▁▁
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
median_house_value
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
206855.82
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
115395.62
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14999.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
119600.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
179700.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
264725.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
500001.00
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
▅▇▅▂▂
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Count levels of our categorical variable:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;housing_df %&amp;gt;% 
  count(ocean_proximity,
        sort = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 2
##   ocean_proximity     n
##   &amp;lt;chr&amp;gt;           &amp;lt;int&amp;gt;
## 1 &amp;lt;1H OCEAN        9136
## 2 INLAND           6551
## 3 NEAR OCEAN       2658
## 4 NEAR BAY         2290
## 5 ISLAND              5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function &lt;code&gt;ggscatmat&lt;/code&gt; from the package &lt;code&gt;GGally&lt;/code&gt; creates a matrix with scatterplots, densities and correlations for numeric columns. In our code, we enter the dataset &lt;code&gt;housing_df&lt;/code&gt;, choose columns 6 to 9, a color column for our categorical variable &lt;code&gt;ocean_proximity&lt;/code&gt;, and an alpha level of 0.8 (for transparency).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggscatmat(housing_df, columns = 6:9, color=&amp;quot;ocean_proximity&amp;quot;, alpha=0.8)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;index_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To obtain an overview of even more visualizations, we can use the function &lt;code&gt;ggpairs&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggpairs(housing_df)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;index_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;data-exploration&#34; class=&#34;section level2&#34; number=&#34;1.3&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.3&lt;/span&gt; Data exploration&lt;/h2&gt;
&lt;p&gt;A Geographical scatterplot of the data:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;housing_df %&amp;gt;% 
  ggplot(aes(x = longitude, y = latitude)) +
  geom_point(color = &amp;quot;cornflowerblue&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:point-long-lat&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;index_files/figure-html/point-long-lat-1.png&#34; alt=&#34;Scatterplot of longitude and latitude&#34; width=&#34;80%&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1.1: Scatterplot of longitude and latitude
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;A better visualization that highlights high-density areas:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;housing_df %&amp;gt;% 
  ggplot(aes(x = longitude, y = latitude)) +
  geom_point(color = &amp;quot;cornflowerblue&amp;quot;, alpha = 0.1) &lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:point-long-lat-a&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;index_files/figure-html/point-long-lat-a-1.png&#34; alt=&#34;Scatterplot of longitude and latitude that highlights high-density areas&#34; width=&#34;80%&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1.2: Scatterplot of longitude and latitude that highlights high-density areas
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;California housing prices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;red is expensive,&lt;/li&gt;
&lt;li&gt;purple is cheap and&lt;/li&gt;
&lt;li&gt;larger circles indicate areas with a larger population.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;housing_df %&amp;gt;% 
  ggplot(aes(x = longitude, y = latitude)) +
  geom_point(aes(size = population, color = median_house_value), 
             alpha = 0.4) +
  scale_colour_gradientn(colours=rev(rainbow(4)))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:plot-ca-prices&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;index_files/figure-html/plot-ca-prices-1.png&#34; alt=&#34;California housing_df prices&#34; width=&#34;80%&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1.3: California housing_df prices
&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggmap)

qmplot(x = longitude, 
       y = latitude, 
       data = housing_df, 
       geom = &amp;quot;point&amp;quot;, 
       color = median_house_value, 
       size = population,
       alpha = 0.4) +
  scale_colour_gradientn(colours=rev(rainbow(4)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;index_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;data-preparation&#34; class=&#34;section level1&#34; number=&#34;2&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; Data preparation&lt;/h1&gt;
&lt;div id=&#34;data-splitting&#34; class=&#34;section level2&#34; number=&#34;2.1&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.1&lt;/span&gt; Data splitting&lt;/h2&gt;
&lt;p&gt;Before we build our model, we first split data into training and test set using stratified sampling.&lt;/p&gt;
&lt;p&gt;Let’s assume we would know that the median income is a very important attribute to predict median housing prices. Therefore, we would want to create a training and test set using stratified sampling.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;stratum&lt;/em&gt; (plural strata) refers to a subset (part) of the population (entire collection of items under consideration) which is being sampled:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;housing_df %&amp;gt;% 
  ggplot(aes(median_income)) +
  geom_histogram(bins = 30)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:hist-med-income&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;index_files/figure-html/hist-med-income-1.png&#34; alt=&#34;Histogram of Median Income&#34; width=&#34;80%&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 2.1: Histogram of Median Income
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We want to ensure that the test set is representative of the various categories of incomes in the whole dataset. In other words, we would like to have instances for each &lt;em&gt;stratum&lt;/em&gt;, or else the estimate of a stratum’s importance may be biased. This means that you should not have too many strata, and each stratum should be large enough. We use 5 strata in our example.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(42)

new_split &amp;lt;- initial_split(housing_df, 
                           prop = 3/4, 
                           strata = median_income, 
                           breaks = 5)

new_train &amp;lt;- training(new_split) 
new_test &amp;lt;- testing(new_split)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;recipes&#34; class=&#34;section level2&#34; number=&#34;2.2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2&lt;/span&gt; Recipes&lt;/h2&gt;
&lt;p&gt;Next, we use a &lt;code&gt;recipe()&lt;/code&gt; to build a set of steps for data preprocessing and feature engineering.&lt;/p&gt;
&lt;p&gt;Recipes are built as a series of preprocessing steps, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;converting qualitative predictors to indicator variables (also known as dummy variables),&lt;/li&gt;
&lt;li&gt;transforming data to be on a different scale (e.g., taking the logarithm of a variable),&lt;/li&gt;
&lt;li&gt;transforming whole groups of predictors together,&lt;/li&gt;
&lt;li&gt;extracting key features from raw variables (e.g., getting the day of the week out of a date variable),&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In summary, the idea of the &lt;a href=&#34;https://recipes.tidymodels.org&#34;&gt;recipes package&lt;/a&gt; is to define a recipe or blueprint that can be used to sequentially define the encodings and preprocessing of the data (i.e. “feature engineering”) before we build our models.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;First, we must tell the &lt;code&gt;recipe()&lt;/code&gt; what our model is going to be (using a formula here) and what our training data is.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;step_novel()&lt;/code&gt; will convert all nominal variables to factors.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We then convert the factor columns into (one or more) numeric binary (0 and 1) variables for the levels of the training data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We remove any numeric variables that have zero variance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We normalize (center and scale) the numeric variables.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;housing_rec &amp;lt;-
  recipe(median_house_value ~ ., data = new_train) %&amp;gt;%
  step_novel(all_nominal(), -all_outcomes()) %&amp;gt;%
  step_dummy(all_nominal()) %&amp;gt;%
  step_zv(all_predictors()) %&amp;gt;%
  step_normalize(all_predictors())

# Show the content of our recipe
housing_rec&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Data Recipe
## 
## Inputs:
## 
##       role #variables
##    outcome          1
##  predictor          9
## 
## Operations:
## 
## Novel factor level assignment for all_nominal(), -all_outcomes()
## Dummy variables from all_nominal()
## Zero variance filter on all_predictors()
## Centering and scaling for all_predictors()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now it’s time to &lt;strong&gt;specify&lt;/strong&gt; and then &lt;strong&gt;fit&lt;/strong&gt; our models.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;model-building&#34; class=&#34;section level1&#34; number=&#34;3&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; Model building&lt;/h1&gt;
&lt;div id=&#34;model-specification&#34; class=&#34;section level2&#34; number=&#34;3.1&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.1&lt;/span&gt; Model specification&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Pick a &lt;code&gt;model type&lt;/code&gt;: choose from this &lt;a href=&#34;https://www.tidymodels.org/find/parsnip/&#34;&gt;list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Set the &lt;code&gt;engine&lt;/code&gt;: choose from this &lt;a href=&#34;https://www.tidymodels.org/find/parsnip/&#34;&gt;list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Set the &lt;code&gt;mode&lt;/code&gt;: regression or classification&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidymodels)

lm_spec &amp;lt;- # your model specification
  linear_reg() %&amp;gt;%  # model type
  set_engine(engine = &amp;quot;lm&amp;quot;) %&amp;gt;%  # model engine
  set_mode(&amp;quot;regression&amp;quot;) # model mode

# Show your model specification
lm_spec&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Linear Regression Model Specification (regression)
## 
## Computational engine: lm&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To combine the data preparation with the model building, we use the package &lt;a href=&#34;https://workflows.tidymodels.org&#34;&gt;workflows&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A workflow is an object that can bundle together your pre-processing, modeling, and post-processing requests&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;create-workflow&#34; class=&#34;section level2&#34; number=&#34;3.2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2&lt;/span&gt; Create workflow&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lm_wflow &amp;lt;-
 workflow() %&amp;gt;%
 add_model(lm_spec) %&amp;gt;% 
 add_recipe(housing_rec)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;evaluate-model&#34; class=&#34;section level2&#34; number=&#34;3.3&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.3&lt;/span&gt; Evaluate model&lt;/h2&gt;
&lt;p&gt;We build a validation set with K-fold crossvalidation:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(100)

cv_folds &amp;lt;-
 vfold_cv(new_train, 
          v = 5, 
          strata = median_income,
          breaks = 5) 

cv_folds&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## #  5-fold cross-validation using stratification 
## # A tibble: 5 x 2
##   splits               id   
##   &amp;lt;list&amp;gt;               &amp;lt;chr&amp;gt;
## 1 &amp;lt;split [12.4K/3.1K]&amp;gt; Fold1
## 2 &amp;lt;split [12.4K/3.1K]&amp;gt; Fold2
## 3 &amp;lt;split [12.4K/3.1K]&amp;gt; Fold3
## 4 &amp;lt;split [12.4K/3.1K]&amp;gt; Fold4
## 5 &amp;lt;split [12.4K/3.1K]&amp;gt; Fold5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can fit the model and collect the performance metrics with &lt;code&gt;collect_metrics()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lm_wflow_eval &amp;lt;- 
  lm_wflow %&amp;gt;% 
  fit_resamples(
    median_house_value ~ ., 
    resamples = cv_folds
    ) 

lm_wflow_eval%&amp;gt;% 
    collect_metrics()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 6
##   .metric .estimator      mean     n   std_err .config             
##   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;               
## 1 rmse    standard   69040.        5 787.      Preprocessor1_Model1
## 2 rsq     standard       0.644     5   0.00983 Preprocessor1_Model1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Usually, we would fit multiple models and select the one with the smallest RMSE. In this example, we only demonstrate the process with one model.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;last-fit-and-evaluation&#34; class=&#34;section level2&#34; number=&#34;3.4&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.4&lt;/span&gt; Last fit and evaluation&lt;/h2&gt;
&lt;p&gt;Fit the best model to the training set and evaluate the test set with the function &lt;a href=&#34;https://tune.tidymodels.org/reference/last_fit.html&#34;&gt;&lt;code&gt;last_fit()&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;last_fit_lm &amp;lt;- last_fit(lm_wflow, split = new_split)

# Show RMSE and RSQ
last_fit_lm %&amp;gt;% 
  collect_metrics()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 4
##   .metric .estimator .estimate .config             
##   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;               
## 1 rmse    standard   68182.    Preprocessor1_Model1
## 2 rsq     standard       0.650 Preprocessor1_Model1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
