<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Jan Kirenz</title>
    <link>/tags/python/</link>
    <description>Recent content in Python on Jan Kirenz</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Jan Kirenz, {year}</copyright>
    <lastBuildDate>Mon, 30 Sep 2019 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Applied Statistics</title>
      <link>/talk/2019-applied-statistics/</link>
      <pubDate>Mon, 30 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/talk/2019-applied-statistics/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Network Analysis with Python</title>
      <link>/post/2019-08-13-network_analysis/network_analysis/</link>
      <pubDate>Tue, 13 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019-08-13-network_analysis/network_analysis/</guid>
      <description>

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#conda install -c anaconda networkx
import networkx as nx
import matplotlib.pyplot as plt
%matplotlib inline
import warnings; warnings.simplefilter(&#39;ignore&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;social-network-analysis-sna&#34;&gt;Social Network Analysis (SNA)&lt;/h2&gt;

&lt;p&gt;Social network analysis (SNA) with &lt;a href=&#34;(https://networkx.github.io/documentation/stable/)&#34; target=&#34;_blank&#34;&gt;NetworkX&lt;/a&gt;, a Python library for the study of the structure, dynamics, and functions of complex networks.&lt;/p&gt;

&lt;p&gt;Each network consists of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nodes: The individuals whose network we are building.&lt;/li&gt;
&lt;li&gt;Edges: The connection between the nodes. It represents a relationship between the nodes of the network.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;symmetric-networks-undirected&#34;&gt;Symmetric Networks (undirected)&lt;/h3&gt;

&lt;p&gt;The first network that we create is a group of people who work together. This is called a &lt;strong&gt;symmetric network&lt;/strong&gt; because the relationship &amp;ldquo;working together&amp;rdquo; is a symmetric relationship: If A is related to B, B is also related to A.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;G_symmetric = nx.Graph()

G_symmetric.add_edge(&#39;Steven&#39;,  &#39;Laura&#39;)
G_symmetric.add_edge(&#39;Steven&#39;,  &#39;Marc&#39;)
G_symmetric.add_edge(&#39;Steven&#39;,  &#39;John&#39;)
G_symmetric.add_edge(&#39;Steven&#39;,  &#39;Michelle&#39;)
G_symmetric.add_edge(&#39;Laura&#39;,   &#39;Michelle&#39;)
G_symmetric.add_edge(&#39;Michelle&#39;,&#39;Marc&#39;)
G_symmetric.add_edge(&#39;George&#39;,  &#39;John&#39;)
G_symmetric.add_edge(&#39;George&#39;,  &#39;Steven&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(nx.info(G_symmetric))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Name:
Type: Graph
Number of nodes: 6
Number of edges: 8
Average degree:   2.6667
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we visualize the network with the &lt;code&gt;draw_networkx()&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.figure(figsize=(5,5))
nx.draw_networkx(G_symmetric);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/post/2019-08-13-network_analysis/output_8_0.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;asymmetric-networks-directed&#34;&gt;Asymmetric Networks (directed)&lt;/h3&gt;

&lt;p&gt;What if the relationship between nodes is &amp;lsquo;child of&amp;rsquo;, then the relationship is no longer symmetric. This is the case if someone follows someone else on Twitter. Or in the case of hyperlinks.&lt;/p&gt;

&lt;p&gt;If A is the child of B, then B is not a child of A. Such a network where the relationship is &lt;strong&gt;asymmetric&lt;/strong&gt; (A is related to B, does not necessarily means that B is associated with A) is called an Asymmetric network.&lt;/p&gt;

&lt;p&gt;We can build the asymmetric network in NetworkX using &lt;code&gt;DiGraph&lt;/code&gt; method, which is short of &lt;strong&gt;Directional Graph&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;G_asymmetric = nx.DiGraph()
G_asymmetric.add_edge(&#39;A&#39;,&#39;B&#39;)
G_asymmetric.add_edge(&#39;A&#39;,&#39;D&#39;)
G_asymmetric.add_edge(&#39;C&#39;,&#39;A&#39;)
G_asymmetric.add_edge(&#39;D&#39;,&#39;E&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make sure that all nodes are distinctly visible in the network, use the &lt;code&gt;spring_layout()&lt;/code&gt; function, followed by the &lt;code&gt;draw_networkx()&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nx.spring_layout(G_asymmetric)
nx.draw_networkx(G_asymmetric)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/post/2019-08-13-network_analysis/output_12_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;weighted-networks&#34;&gt;Weighted Networks&lt;/h3&gt;

&lt;p&gt;Till now we had networks without weights, but it is possible that networks are made with weights, for example, if in our initial network we consider the number of projects done together as a weight, we will get a weighted Network.&lt;/p&gt;

&lt;p&gt;Let us make one again of the employees, but this time we add weight to the network, each edge has a weight signifying the number of projects they have done together.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;G_weighted = nx.Graph()

G_weighted.add_edge(&#39;Steven&#39;,  &#39;Laura&#39;,   weight=25)
G_weighted.add_edge(&#39;Steven&#39;,  &#39;Marc&#39;,    weight=8)
G_weighted.add_edge(&#39;Steven&#39;,  &#39;John&#39;,    weight=11)
G_weighted.add_edge(&#39;Steven&#39;,  &#39;Michelle&#39;,weight=1)
G_weighted.add_edge(&#39;Laura&#39;,   &#39;Michelle&#39;,weight=1)
G_weighted.add_edge(&#39;Michelle&#39;,&#39;Marc&#39;,    weight=1)
G_weighted.add_edge(&#39;George&#39;,  &#39;John&#39;,    weight=8)
G_weighted.add_edge(&#39;George&#39;,  &#39;Steven&#39;,  weight=4)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;elarge = [(u, v) for (u, v, d) in G_weighted.edges(data=True) if d[&#39;weight&#39;] &amp;gt; 8]
esmall = [(u, v) for (u, v, d) in G_weighted.edges(data=True) if d[&#39;weight&#39;] &amp;lt;= 8]

pos = nx.circular_layout(G_weighted)  # positions for all nodes

# nodes
nx.draw_networkx_nodes(G_weighted, pos, node_size=700)

# edges
nx.draw_networkx_edges(G_weighted, pos, edgelist=elarge,width=6)
nx.draw_networkx_edges(G_weighted, pos, edgelist=esmall,width=6, alpha=0.5, edge_color=&#39;b&#39;, style=&#39;dashed&#39;)

# labels
nx.draw_networkx_labels(G_weighted, pos, font_size=20, font_family=&#39;sans-serif&#39;)

plt.axis(&#39;off&#39;)
plt.show();

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/post/2019-08-13-network_analysis/output_15_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;clustering-coefficient&#34;&gt;Clustering coefficient&lt;/h2&gt;

&lt;p&gt;It is observed that people who share connections in a social network tend to form associations. In other words, there is a tendency in a social network to form clusters.&lt;/p&gt;

&lt;p&gt;We can determine the clusters of a node, &lt;strong&gt;local clustering coefficient&lt;/strong&gt;, which is the fraction of pairs of the node&amp;rsquo;s friends (that is connections) that are connected with each other.&lt;/p&gt;

&lt;p&gt;To determine the local clustering coefficient, we make use of &lt;code&gt;nx.clustering(Graph, Node)&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;In the symmetric employee-network, you will find that Michelle has a local clustering coefficient of 1 and Laura  has a local clustering coefficient of 0.67.&lt;/p&gt;

&lt;p&gt;The average clustering coefficient (sum of all the local clustering coefficients divided by the number of nodes) for the symmetric employee-network is 0.867.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nx.clustering(G_symmetric,&#39;Michelle&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0.6666666666666666
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nx.clustering(G_symmetric,&#39;Laura&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nx.average_clustering(G_symmetric)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0.8277777777777778
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;network-distance-measures&#34;&gt;Network Distance Measures&lt;/h2&gt;

&lt;h3 id=&#34;degree&#34;&gt;Degree&lt;/h3&gt;

&lt;p&gt;Degree of a node defines the number of connections a node has. NetworkX has the function &lt;code&gt;degree&lt;/code&gt; which we can use to determine the degree of a node in the network.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nx.degree(G_symmetric, &#39;Michelle&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will return a value of 3, as Michelle has worked with three employees in the network.&lt;/p&gt;

&lt;h3 id=&#34;distance&#34;&gt;Distance&lt;/h3&gt;

&lt;p&gt;We can also determine the shortest path between two nodes and its length in NetworkX using &lt;code&gt;nx.shortest_path(Graph, Node1, Node2)&lt;/code&gt; and &lt;code&gt;nx.shortest_path_length(Graph, Node1, Node2)&lt;/code&gt;
 functions respectively.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nx.shortest_path(G_symmetric, &#39;Michelle&#39;, &#39;John&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;Michelle&#39;, &#39;Steven&#39;, &#39;John&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nx.shortest_path_length(G_symmetric, &#39;Michelle&#39;, &#39;John&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;breadth-first-search&#34;&gt;Breadth-first search&lt;/h3&gt;

&lt;p&gt;We can find the distance of a node from every other node in the network using breadth-first search algorithm, starting from that node. networkX provides the function bfs_tree to do it.&lt;/p&gt;

&lt;p&gt;And so if you use &lt;code&gt;M = nx.bfs_tree(G_symmetric, &#39;Michelle&#39;)&lt;/code&gt; and now draw this tree, we will get a network structure telling how we can reach other nodes of the network starting from Michelle .&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;S = nx.bfs_tree(G_symmetric, &#39;Steven&#39;)
nx.draw_networkx(S)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/post/2019-08-13-network_analysis/output_29_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;M = nx.bfs_tree(G_symmetric, &#39;Michelle&#39;)
nx.draw_networkx(M)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/post/2019-08-13-network_analysis/output_30_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;eccentricity&#34;&gt;Eccentricity&lt;/h3&gt;

&lt;p&gt;Eccentricity of a node A is defined as the largest distance between A and all other nodes.&lt;/p&gt;

&lt;p&gt;It can be found using &lt;code&gt;nx.eccentricity()&lt;/code&gt; function. In the symmetric employee-network, Michelle has an eccentricity of 2, and Steven has an eccentricity of 1 (he is connected to every other node).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nx.eccentricity(G_symmetric,&#39;Michelle&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nx.eccentricity(G_symmetric,&#39;Steven&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;centrality-measures&#34;&gt;Centrality measures&lt;/h2&gt;

&lt;p&gt;Above we learned some of the network distance measures and they are useful in knowing how the information will spread through the network.&lt;/p&gt;

&lt;p&gt;In this section, we will learn how to find the most important nodes (individuals) in the network. These parameters are called as &lt;strong&gt;centrality measures&lt;/strong&gt;. Centrality Measures can help us in identifying popularity, most liked, and biggest influencers within the network.&lt;/p&gt;

&lt;h3 id=&#34;degree-centrality&#34;&gt;Degree Centrality&lt;/h3&gt;

&lt;p&gt;The people most popular or more liked usually are the ones who have more friends.&lt;/p&gt;

&lt;p&gt;Degree centrality is a measure of the number of connections a particular node has in the network. It is based on the fact that important nodes have many connections. NetworkX has the function &lt;code&gt;degree_centrality()&lt;/code&gt; to calculate the degree centrality of all the nodes of a network.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nx.degree_centrality(G_symmetric)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{&#39;Steven&#39;: 1.0,
 &#39;Laura&#39;: 0.4,
 &#39;Marc&#39;: 0.4,
 &#39;John&#39;: 0.4,
 &#39;Michelle&#39;: 0.6000000000000001,
 &#39;George&#39;: 0.4}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;eigenvector-centrality&#34;&gt;Eigenvector Centrality&lt;/h3&gt;

&lt;p&gt;It is not just how many individuals one is connected too, but the type of people one is connected with that can decide the importance of a node.&lt;/p&gt;

&lt;p&gt;Eigenvector centrality is a measure of how import a node is by accounting for the fact of how well it is connected to other important nodes.&lt;/p&gt;

&lt;p&gt;We can use the &lt;code&gt;eigenvector_centrality()&lt;/code&gt; function of NetworkX to calculate eigenvector centrality of all the nodes in a network.&lt;/p&gt;

&lt;p&gt;The Google&amp;rsquo;s Pagerank algorithm is a variant of Eigenvector centrality algorithm.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nx.eigenvector_centrality(G_symmetric)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{&#39;Steven&#39;: 0.6006686104947806,
 &#39;Laura&#39;: 0.3545677660798074,
 &#39;Marc&#39;: 0.3545677660798074,
 &#39;John&#39;: 0.30844592433424667,
 &#39;Michelle&#39;: 0.4443904166426225,
 &#39;George&#39;: 0.30844592433424667}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;closeness-centrality&#34;&gt;Closeness Centrality&lt;/h3&gt;

&lt;p&gt;Closeness Centrality is a measure where each node’s importance is determined by &lt;strong&gt;closeness to all other nodes&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nx.closeness_centrality(G_symmetric)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{&#39;Steven&#39;: 1.0,
 &#39;Laura&#39;: 0.625,
 &#39;Marc&#39;: 0.625,
 &#39;John&#39;: 0.625,
 &#39;Michelle&#39;: 0.7142857142857143,
 &#39;George&#39;: 0.625}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;betweenness-centrality&#34;&gt;Betweenness Centrality&lt;/h3&gt;

&lt;p&gt;The Betweenness Centrality is the centrality of control.&lt;/p&gt;

&lt;p&gt;It represents the frequency at which a point occurs on the &lt;strong&gt;shortest paths&lt;/strong&gt; that connected pair of points. It quantifies how many times a particular node comes in the shortest chosen path between two other nodes.&lt;/p&gt;

&lt;p&gt;The nodes with high betweenness centrality play a significant role in the communication/information flow within the network.&lt;/p&gt;

&lt;p&gt;The nodes with high betweenness centrality can have a strategic control and influence on others. An individual at such a strategic position can influence the whole group, by either withholding or coloring the information in transmission.&lt;/p&gt;

&lt;p&gt;Networkx has the function &lt;code&gt;betweenness_centrality()&lt;/code&gt; to measure it for the network. It has options to select if we want betweenness values to be normalized or not, weights to be included in centrality calculation or not, and to include the endpoints in the shortest path counts or not.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nx.betweenness_centrality(G_symmetric)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{&#39;Steven&#39;: 0.65,
 &#39;Laura&#39;: 0.0,
 &#39;Marc&#39;: 0.0,
 &#39;John&#39;: 0.0,
 &#39;Michelle&#39;: 0.05,
 &#39;George&#39;: 0.0}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pos = nx.spring_layout(G_symmetric)
betCent = nx.betweenness_centrality(G_symmetric, normalized=True, endpoints=True)
node_color = [20000.0 * G_symmetric.degree(v) for v in G_symmetric]
node_size =  [v * 10000 for v in betCent.values()]
plt.figure(figsize=(10,10))
nx.draw_networkx(G_symmetric, pos=pos, with_labels=True,
                 node_color=node_color,
                 node_size=node_size )
plt.axis(&#39;off&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/post/2019-08-13-network_analysis/output_45_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sorted(betCent, key=betCent.get, reverse=True)[:5]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;Steven&#39;, &#39;Michelle&#39;, &#39;Laura&#39;, &#39;Marc&#39;, &#39;John&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;facebook-case-study&#34;&gt;Facebook Case Study&lt;/h2&gt;

&lt;p&gt;This dataset consists of &amp;lsquo;circles&amp;rsquo; (or &amp;lsquo;friends lists&amp;rsquo;) from Facebook. Facebook data was collected from survey participants using this Facebook app. The dataset includes node features (profiles), circles, and ego networks.&lt;/p&gt;

&lt;p&gt;Facebook data has been anonymized by replacing the Facebook-internal ids for each user with a new value. Also, while feature vectors from this dataset have been provided, the interpretation of those features has been obscured. For instance, where the original dataset may have contained a feature &amp;ldquo;political=Democratic Party&amp;rdquo;, the new data would simply contain &amp;ldquo;political=anonymized feature 1&amp;rdquo;. Thus, using the anonymized data it is possible to determine whether two users have the same political affiliations, but not what their individual political affiliations represent.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://snap.stanford.edu/data/egonets-Facebook.html&#34; target=&#34;_blank&#34;&gt;J. McAuley and J. Leskovec. Learning to Discover Social Circles in Ego Networks. NIPS, 2012&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let us start with the Facebook data, for our analysis here we will use Facebook combined ego networks dataset, it contains the aggregated network of ten individuals’ Facebook friends list. You can download the required facebook_combined.txt file from the Stanford University site.&lt;/p&gt;

&lt;p&gt;We read in the file and construct the Graph:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.dropbox.com/s/k34phmodh9nsy9r/facebook_combined.txt?dl=0&#34; target=&#34;_blank&#34;&gt;Download the file&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd

df = pd.read_csv(&#39;/Users/jankirenz/Dropbox/Data/facebook_combined.txt&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.info()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;
RangeIndex: 88233 entries, 0 to 88232
Data columns (total 1 columns):
0 1    88233 non-null object
dtypes: object(1)
memory usage: 689.4+ KB
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.tail()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;0 1&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;88228&lt;/th&gt;
      &lt;td&gt;4026 4030&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;88229&lt;/th&gt;
      &lt;td&gt;4027 4031&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;88230&lt;/th&gt;
      &lt;td&gt;4027 4032&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;88231&lt;/th&gt;
      &lt;td&gt;4027 4038&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;88232&lt;/th&gt;
      &lt;td&gt;4031 4038&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;G_fb = nx.read_edgelist(&amp;quot;/Users/jankirenz/Dropbox/Data/facebook_combined.txt&amp;quot;, create_using = nx.Graph(), nodetype=int)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(nx.info(G_fb))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Name:
Type: Graph
Number of nodes: 4039
Number of edges: 88234
Average degree:  43.6910
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The network consists of 4,039 nodes, connected via 88,234 edges.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.figure(figsize=(20,20))
nx.draw_networkx(G_fb);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/post/2019-08-13-network_analysis/net1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can also visualize the network such that the node color varies with Degree and node size with Betweenness Centrality. The code to do this is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pos = nx.spring_layout(G_fb)
betCent = nx.betweenness_centrality(G_fb, normalized=True, endpoints=True)
node_color = [20000.0 * G_fb.degree(v) for v in G_fb]
node_size =  [v * 10000 for v in betCent.values()]
plt.figure(figsize=(20,20))
nx.draw_networkx(G_fb, pos=pos, with_labels=False,
                 node_color=node_color,
                 node_size=node_size )
plt.axis(&#39;off&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/post/2019-08-13-network_analysis/net2.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can also know the labels of the nodes with the highest betweenness centrality using:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sorted(betCent, key=betCent.get, reverse=True)[:5]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can see that some nodes are common between Degree Centrality, which is a measure of degree, and Betweenness Centrality which controls the information flow.&lt;/p&gt;

&lt;p&gt;It is natural that nodes that are more connected also lie on shortest paths between other nodes. The node 1912 is an important node as it is crucial according to all three centrality measures that we had considered.&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;Sources of examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.datacamp.com/community/tutorials/social-network-analysis-python&#34; target=&#34;_blank&#34;&gt;Datacamp&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aksakalli.github.io/2017/07/17/network-centrality-measures-and-their-visualization.html&#34; target=&#34;_blank&#34;&gt;Aksakalli, C.&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://snap.stanford.edu/data/egonets-Facebook.html&#34; target=&#34;_blank&#34;&gt;McAuley, J. &amp;amp; Leskovec, J.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to Network Analysis with Python</title>
      <link>/project/python-network-analysis-intro/</link>
      <pubDate>Mon, 12 Aug 2019 10:00:00 +0000</pubDate>
      
      <guid>/project/python-network-analysis-intro/</guid>
      <description>


&lt;p&gt;NetworkX is a Python package for the creation, manipulation, and study of the structure, dynamics, and functions of complex networks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Material:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/slides/Social_Network_Analysis_Networkx/index.html&#34;&gt;Introduction to network presentation slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/spreadsheets/d/13samMteoTnAkUoHul1iV5pA0bc4qmYjGge019HcT1F4/edit?usp=sharing&#34;&gt;Network analysis tasks with code templates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Lasso Regression with Python</title>
      <link>/post/2019-08-12-python-lasso-regression-auto/python-lasso-regression/</link>
      <pubDate>Mon, 12 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019-08-12-python-lasso-regression-auto/python-lasso-regression/</guid>
      <description>

&lt;p&gt;Lasso performs a so called &lt;code&gt;L1 regularization&lt;/code&gt; (a process of introducing additional information in order to prevent overfitting), i.e. adds penalty equivalent to absolute value of the magnitude of coefficients.&lt;/p&gt;

&lt;p&gt;In particular, the minimization objective does not only include the residual sum of squares (RSS) but also the sum of the absolute value of coefficients.&lt;/p&gt;

&lt;p&gt;The residual sum of squares (RSS) is calculated as follows:&lt;/p&gt;

&lt;p&gt;$$ RSS = \sum_{i=1}^{n} (y - \hat{y})^2 $$&lt;/p&gt;

&lt;p&gt;Hence, the minimization objective becomes: RSS + α (sum of absolute value of coefficients), where α (alpha) provides a trade-off between balancing RSS and magnitude of coefficients.&lt;/p&gt;

&lt;p&gt;α can take various values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;α = 0: Same coefficients as simple linear regression&lt;/li&gt;
&lt;li&gt;α = ∞: All coefficients zero (same logic as before)&lt;/li&gt;
&lt;li&gt;0 &amp;lt; α &amp;lt; ∞: coefficients between 0 and that of simple linear regression&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;data-preparation&#34;&gt;Data preparation&lt;/h2&gt;

&lt;p&gt;This tutorial involves the use of the Lasso regression on the &amp;ldquo;Auto&amp;rdquo; dataset. In particular, we only use observations 1 to 200 for our analysis. Furthermore, you can drop the &lt;code&gt;name&lt;/code&gt; variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline
plt.style.use(&#39;ggplot&#39;)
import warnings; warnings.simplefilter(&#39;ignore&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.read_csv(&amp;quot;https://raw.githubusercontent.com/kirenz/datasets/master/Auto.csv&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Tidying data&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = df.iloc[0:200]
df = df.drop([&#39;name&#39;], axis=1)
df.info()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;
RangeIndex: 200 entries, 0 to 199
Data columns (total 8 columns):
mpg             200 non-null float64
cylinders       200 non-null int64
displacement    200 non-null float64
horsepower      200 non-null object
weight          200 non-null int64
acceleration    200 non-null float64
year            200 non-null int64
origin          200 non-null int64
dtypes: float64(3), int64(4), object(1)
memory usage: 12.6+ KB
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;origin&#39;] = pd.Categorical(df[&#39;origin&#39;])
df[&#39;horsepower&#39;] = pd.to_numeric(df[&#39;horsepower&#39;], errors=&#39;coerce&#39;)
print(df.isnull().sum())
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;mpg             0
cylinders       0
displacement    0
horsepower      2
weight          0
acceleration    0
year            0
origin          0
dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# drop missing cases
df = df.dropna()
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;implementation-of-lasso-regression&#34;&gt;Implementation of Lasso regression&lt;/h1&gt;

&lt;p&gt;We use scikit learn to fit a Lasso regression &lt;a href=&#34;http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Lasso.html&#34; target=&#34;_blank&#34;&gt;(see documentation)&lt;/a&gt; and follow a number of steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(1.1) &lt;strong&gt;Standardize&lt;/strong&gt; the features (module: &lt;code&gt;from sklearn.preprocessing import StandardScaler&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Hint: It is important to standardize the features by removing the mean and scaling to unit variance. The L1 (Lasso) and L2 (Ridge) regularizers of linear models assume that all features are centered around 0 and have variance in the same order. If a feature has a variance that is orders of magnitude larger that others, it might dominate the objective function and make the estimator unable to learn from other features correctly as expected.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;(1.2) &lt;strong&gt;Split the data set&lt;/strong&gt; into train and test sets (use &lt;code&gt;X_train&lt;/code&gt;, &lt;code&gt;X_test&lt;/code&gt;, &lt;code&gt;y_train&lt;/code&gt;, &lt;code&gt;y_test&lt;/code&gt;), with the first 75% of the data for training and the remaining for testing. (module: &lt;code&gt;from sklearn.model_selection import train_test_split&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(1.3) Apply &lt;strong&gt;Lasso regression&lt;/strong&gt; on the training set with the regularization parameter &lt;strong&gt;lambda = 0.5&lt;/strong&gt; (module: &lt;code&gt;from sklearn.linear_model import Lasso&lt;/code&gt;) and print the $R^2$-score for the training and test set. Comment on your findings.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(1.4) Apply the &lt;strong&gt;Lasso regression&lt;/strong&gt; on the training set with the following &lt;strong&gt;λ parameters: (0.001, 0.01, 0.1, 0.5, 1, 2, 10)&lt;/strong&gt;. Evaluate the R^2 score for all the models you obtain on both the train and test sets.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(1.5) &lt;strong&gt;Plot&lt;/strong&gt; all values for both data sets (train and test $R^2$-values) as a function of λ. Comment on your findings.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(1.6) Store your test data results in a DataFrame and indentify the lambda where the $R^2$ has it&amp;rsquo;s &lt;strong&gt;maximum value&lt;/strong&gt; in the &lt;strong&gt;test data&lt;/strong&gt;. Fit a Lasso model with this lambda parameter (use the training data) and obtain the corresponding &lt;strong&gt;regression coefficients&lt;/strong&gt;. Furthermore, obtain the &lt;strong&gt;mean squared error&lt;/strong&gt; for the test data of this model (module: &lt;code&gt;from sklearn.metrics import mean_squared_error&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(1.7) Evaluate the performance of a &lt;strong&gt;Lasso regression&lt;/strong&gt; for different regularization parameters λ using &lt;strong&gt;5-fold cross validation&lt;/strong&gt; on the training set (module: &lt;code&gt;from sklearn.model_selection import cross_val_score&lt;/code&gt;) and plot the cross-validation (CV) $R^2$ scores of the training and test data as a function of λ.&lt;/p&gt;

&lt;p&gt;Use the following lambda parameters:
l_min = 0.05
l_max = 0.2
l_num = 20
lambdas = np.linspace(l_min,l_max, l_num)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(1.8) Finally, store your test data results in a DataFrame and identify the lambda where the $R^2$ has it&amp;rsquo;s &lt;strong&gt;maximum value&lt;/strong&gt; in the &lt;strong&gt;test data&lt;/strong&gt;. Fit a Lasso model with this lambda parameter (use the training data) and obtain the corresponding &lt;strong&gt;regression coefficients&lt;/strong&gt;. Furthermore, obtain the &lt;strong&gt;mean squared error&lt;/strong&gt; for the test data of this model (module: &lt;code&gt;from sklearn.metrics import mean_squared_error&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;1-1-standardization&#34;&gt;1.1 Standardization&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dfs = df.astype(&#39;int&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dfs.info()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;
Int64Index: 198 entries, 0 to 199
Data columns (total 8 columns):
mpg             198 non-null int64
cylinders       198 non-null int64
displacement    198 non-null int64
horsepower      198 non-null int64
weight          198 non-null int64
acceleration    198 non-null int64
year            198 non-null int64
origin          198 non-null int64
dtypes: int64(8)
memory usage: 13.9 KB
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dfs.columns
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Index([&#39;mpg&#39;, &#39;cylinders&#39;, &#39;displacement&#39;, &#39;horsepower&#39;, &#39;weight&#39;,
       &#39;acceleration&#39;, &#39;year&#39;, &#39;origin&#39;],
      dtype=&#39;object&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
dfs[[&#39;cylinders&#39;, &#39;displacement&#39;, &#39;horsepower&#39;,
     &#39;weight&#39;, &#39;acceleration&#39;, &#39;year&#39;, &#39;origin&#39;]] = scaler.fit_transform(dfs[[&#39;cylinders&#39;,
                                                                              &#39;displacement&#39;,
                                                                              &#39;horsepower&#39;,
                                                                              &#39;weight&#39;,
                                                                              &#39;acceleration&#39;,
                                                                              &#39;year&#39;, &#39;origin&#39;]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dfs.head(5)
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;mpg&lt;/th&gt;
      &lt;th&gt;cylinders&lt;/th&gt;
      &lt;th&gt;displacement&lt;/th&gt;
      &lt;th&gt;horsepower&lt;/th&gt;
      &lt;th&gt;weight&lt;/th&gt;
      &lt;th&gt;acceleration&lt;/th&gt;
      &lt;th&gt;year&lt;/th&gt;
      &lt;th&gt;origin&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;1.179744&lt;/td&gt;
      &lt;td&gt;0.726091&lt;/td&gt;
      &lt;td&gt;0.325216&lt;/td&gt;
      &lt;td&gt;0.346138&lt;/td&gt;
      &lt;td&gt;-0.955578&lt;/td&gt;
      &lt;td&gt;-1.516818&lt;/td&gt;
      &lt;td&gt;-0.629372&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;1.179744&lt;/td&gt;
      &lt;td&gt;1.100254&lt;/td&gt;
      &lt;td&gt;1.129264&lt;/td&gt;
      &lt;td&gt;0.548389&lt;/td&gt;
      &lt;td&gt;-1.305309&lt;/td&gt;
      &lt;td&gt;-1.516818&lt;/td&gt;
      &lt;td&gt;-0.629372&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;1.179744&lt;/td&gt;
      &lt;td&gt;0.821807&lt;/td&gt;
      &lt;td&gt;0.784672&lt;/td&gt;
      &lt;td&gt;0.273370&lt;/td&gt;
      &lt;td&gt;-1.305309&lt;/td&gt;
      &lt;td&gt;-1.516818&lt;/td&gt;
      &lt;td&gt;-0.629372&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;1.179744&lt;/td&gt;
      &lt;td&gt;0.699986&lt;/td&gt;
      &lt;td&gt;0.784672&lt;/td&gt;
      &lt;td&gt;0.270160&lt;/td&gt;
      &lt;td&gt;-0.955578&lt;/td&gt;
      &lt;td&gt;-1.516818&lt;/td&gt;
      &lt;td&gt;-0.629372&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;17&lt;/td&gt;
      &lt;td&gt;1.179744&lt;/td&gt;
      &lt;td&gt;0.682583&lt;/td&gt;
      &lt;td&gt;0.554944&lt;/td&gt;
      &lt;td&gt;0.287282&lt;/td&gt;
      &lt;td&gt;-1.655041&lt;/td&gt;
      &lt;td&gt;-1.516818&lt;/td&gt;
      &lt;td&gt;-0.629372&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h3 id=&#34;1-2-split-data&#34;&gt;1.2 Split data&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;X = dfs.drop([&#39;mpg&#39;], axis=1)
y = dfs[&#39;mpg&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=10)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-3-lasso&#34;&gt;1.3 Lasso&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sklearn.linear_model import Lasso

reg = Lasso(alpha=0.5)
reg.fit(X_train, y_train)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Lasso(alpha=0.5, copy_X=True, fit_intercept=True, max_iter=1000,
   normalize=False, positive=False, precompute=False, random_state=None,
   selection=&#39;cyclic&#39;, tol=0.0001, warm_start=False)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;Lasso Regression: R^2 score on training set&#39;, reg.score(X_train, y_train)*100)
print(&#39;Lasso Regression: R^2 score on test set&#39;, reg.score(X_test, y_test)*100)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Lasso Regression: R^2 score on training set 82.49741060950073
Lasso Regression: R^2 score on test set 85.49734440925533
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-4-lasso-with-different-lambdas&#34;&gt;1.4 Lasso with different lambdas&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lambdas = (0.001, 0.01, 0.1, 0.5, 1, 2, 10)
l_num = 7
pred_num = X.shape[1]

# prepare data for enumerate
coeff_a = np.zeros((l_num, pred_num))
train_r_squared = np.zeros(l_num)
test_r_squared = np.zeros(l_num)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# enumerate through lambdas with index and i
for ind, i in enumerate(lambdas):    
    reg = Lasso(alpha = i)
    reg.fit(X_train, y_train)

    coeff_a[ind,:] = reg.coef_
    train_r_squared[ind] = reg.score(X_train, y_train)
    test_r_squared[ind] = reg.score(X_test, y_test)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-5-plot&#34;&gt;1.5 Plot&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Plotting
plt.figure(figsize=(18, 8))
plt.plot(train_r_squared, &#39;bo-&#39;, label=r&#39;$R^2$ Training set&#39;, color=&amp;quot;darkblue&amp;quot;, alpha=0.6, linewidth=3)
plt.plot(test_r_squared, &#39;bo-&#39;, label=r&#39;$R^2$ Test set&#39;, color=&amp;quot;darkred&amp;quot;, alpha=0.6, linewidth=3)
plt.xlabel(&#39;Lamda index&#39;); plt.ylabel(r&#39;$R^2$&#39;)
plt.xlim(0, 6)
plt.title(r&#39;Evaluate lasso regression with lamdas: 0 = 0.001, 1= 0.01, 2 = 0.1, 3 = 0.5, 4= 1, 5= 2, 6 = 10&#39;)
plt.legend(loc=&#39;best&#39;)
plt.grid()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/post/2019-08-12-python-lasso-regression-auto/output_27_0.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-6-identify-best-lambda-and-coefficients&#34;&gt;1.6 Identify best lambda and coefficients&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_lam = pd.DataFrame(test_r_squared*100, columns=[&#39;R_squared&#39;])
df_lam[&#39;lambda&#39;] = (lambdas)
# returns the index of the row where column has maximum value.
df_lam.loc[df_lam[&#39;R_squared&#39;].idxmax()]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;R_squared    88.105773
lambda        0.001000
Name: 0, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Coefficients of best model
reg_best = Lasso(alpha = 0.1)
reg_best.fit(X_train, y_train)
reg_best.coef_
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([-0.35554113, -1.13104696, -0.00596296, -3.31741775, -0.        ,
        0.37914648,  0.74902885])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sklearn.metrics import mean_squared_error
mean_squared_error(y_test, reg_best.predict(X_test))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3.586249592807347
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-7-cross-validation&#34;&gt;1.7 Cross Validation&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;l_min = 0.05
l_max = 0.2
l_num = 20
lambdas = np.linspace(l_min,l_max, l_num)

train_r_squared = np.zeros(l_num)
test_r_squared = np.zeros(l_num)

pred_num = X.shape[1]
coeff_a = np.zeros((l_num, pred_num))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sklearn.model_selection import cross_val_score

for ind, i in enumerate(lambdas):    
    reg = Lasso(alpha = i)
    reg.fit(X_train, y_train)
    results = cross_val_score(reg, X, y, cv=5, scoring=&amp;quot;r2&amp;quot;)

    train_r_squared[ind] = reg.score(X_train, y_train)    
    test_r_squared[ind] = reg.score(X_test, y_test)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Plotting
plt.figure(figsize=(18, 8))
plt.plot(train_r_squared, &#39;bo-&#39;, label=r&#39;$R^2$ Training set&#39;, color=&amp;quot;darkblue&amp;quot;, alpha=0.6, linewidth=3)
plt.plot(test_r_squared, &#39;bo-&#39;, label=r&#39;$R^2$ Test set&#39;, color=&amp;quot;darkred&amp;quot;, alpha=0.6, linewidth=3)
plt.xlabel(&#39;Lamda value&#39;); plt.ylabel(r&#39;$R^2$&#39;)
plt.xlim(0, 19)
plt.title(r&#39;Evaluate 5-fold cv with different lamdas&#39;)
plt.legend(loc=&#39;best&#39;)
plt.grid()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/post/2019-08-12-python-lasso-regression-auto/output_35_0.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-8-best-model&#34;&gt;1.8 Best Model&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_lam = pd.DataFrame(test_r_squared*100, columns=[&#39;R_squared&#39;])
df_lam[&#39;lambda&#39;] = (lambdas)
# returns the index of the row where column has maximum value.
df_lam.loc[df_lam[&#39;R_squared&#39;].idxmax()]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;R_squared    87.897525
lambda        0.050000
Name: 0, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Best Model
reg_best = Lasso(alpha = 0.144737)
reg_best.fit(X_train, y_train)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Lasso(alpha=0.144737, copy_X=True, fit_intercept=True, max_iter=1000,
   normalize=False, positive=False, precompute=False, random_state=None,
   selection=&#39;cyclic&#39;, tol=0.0001, warm_start=False)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sklearn.metrics import mean_squared_error

mean_squared_error(y_test, reg_best.predict(X_test))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3.635187490993961
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;reg_best.coef_
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([-0.34136411, -1.18223273, -0.        , -3.27132984,  0.        ,
        0.33262331,  0.71385488])
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Lasso Regression with Python</title>
      <link>/project/r-lasso-regression/</link>
      <pubDate>Sun, 11 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/project/r-lasso-regression/</guid>
      <description>

&lt;h1 id=&#34;lasso-regression&#34;&gt;Lasso Regression&lt;/h1&gt;

&lt;p&gt;In statistics and machine learning, lasso (least absolute shrinkage and selection operator; also Lasso or LASSO) is a regression analysis method that performs both variable selection and regularization in order to enhance the prediction accuracy and interpretability of the statistical model it produces (&lt;a href=&#34;https://en.wikipedia.org/wiki/Lasso_(statistics)&#34; target=&#34;_blank&#34;&gt;Wikipedia&lt;/a&gt;).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Lasso Regression with Python (Auto Data): &lt;a href=&#34;https://github.com/kirenz/lasso-regression/blob/master/python-lasso-regression-auto.ipynb&#34; target=&#34;_blank&#34;&gt;Jupyter Notebook&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Time Series Analysis with Python</title>
      <link>/project/python-time-series/</link>
      <pubDate>Sun, 11 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/project/python-time-series/</guid>
      <description>

&lt;h1 id=&#34;time-series-analysis-with-python&#34;&gt;Time Series Analysis with Python&lt;/h1&gt;

&lt;p&gt;Time series analysis can be used in a multitude of business applications for forecasting a quantity into the future and explaining its historical patterns. Here are just a few examples of possible use cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Explaining seasonal patterns in sales&lt;/li&gt;
&lt;li&gt;Predicting the expected number of incoming or churning customers&lt;/li&gt;
&lt;li&gt;Estimating the effect of a newly launched product on number of sold units&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Introduction to Time Series Analysis with Python: Fit &lt;strong&gt;ARIMA&lt;/strong&gt; and &lt;strong&gt;SARIMAX-Models&lt;/strong&gt; with &lt;code&gt;Statsmodel&lt;/code&gt;: &lt;a href=&#34;https://github.com/kirenz/time-series-analysis/blob/master/time-series-first-steps.ipynb&#34; target=&#34;_blank&#34;&gt;Jupyter Notebook&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Introduction to Facebook&amp;rsquo;s time series analysis modul &lt;strong&gt;Prophet&lt;/strong&gt;: &lt;a href=&#34;https://github.com/kirenz/time-series-analysis/blob/master/Prophet.ipynb&#34; target=&#34;_blank&#34;&gt;Jupyter Notebook&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Linear Regression Tutorial with Python</title>
      <link>/project/python-linear-regression/</link>
      <pubDate>Sun, 04 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/project/python-linear-regression/</guid>
      <description>

&lt;h1 id=&#34;linear-regression-tutorial-in-python&#34;&gt;Linear Regression Tutorial in Python&lt;/h1&gt;

&lt;p&gt;Linear regression is the fundamental starting point for all regression methods. In this Jupyter Notebook, we fit a regression model in Python and take a closer look at the following topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Histogramms&lt;/li&gt;
&lt;li&gt;Boxplots&lt;/li&gt;
&lt;li&gt;Mean&lt;/li&gt;
&lt;li&gt;Standard deviation&lt;/li&gt;
&lt;li&gt;Mean squared error&lt;/li&gt;
&lt;li&gt;$R^2$&lt;/li&gt;
&lt;li&gt;Pearson&amp;rsquo;s correlation coefficient&lt;/li&gt;
&lt;li&gt;F-Statistic&lt;/li&gt;
&lt;li&gt;Standard error&lt;/li&gt;
&lt;li&gt;Confidence interval&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Download the linear regression tutorial Jupyter Notebook in &lt;a href=&#34;https://github.com/kirenz/linear-regression/blob/master/python-regression-tutorial.ipynb&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt; and open the file in Jupyter Notebook.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>First Steps in Python</title>
      <link>/project/python-first-steps/</link>
      <pubDate>Sat, 03 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/project/python-first-steps/</guid>
      <description>

&lt;h1 id=&#34;first-steps-in-python&#34;&gt;First Steps in Python&lt;/h1&gt;

&lt;p&gt;Download the PDF &lt;a href=&#34;https://github.com/kirenz/first_steps_in_python/blob/master/Python_overview.pdf&#34; target=&#34;_blank&#34;&gt;Python overview&lt;/a&gt; to get an overview about Python and a list of helpful resources (you need to download the file in order to use the embedded links).&lt;/p&gt;

&lt;p&gt;First of all, install &lt;strong&gt;Anaconda&lt;/strong&gt; - it&amp;rsquo;s a free and open-source distribution of the Python programming language that aims to simplify package management and deployment. It already contains Jupyter Notebook (see below) and other important data science modules.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install &lt;a href=&#34;https://www.anaconda.com/distribution/&#34; target=&#34;_blank&#34;&gt;Anaconda&lt;/a&gt; (select the current version of Python 3). After installation, launch the Anaconda Navigator and start Jupyter Notebook or Jupyter Lab.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One important third-party tool for data science is
&lt;strong&gt;Jupyter&lt;/strong&gt;, an open-source web application that allows you to create and share documents that contain live code, equations, visualizations and narrative text. Learn why Jupyter is data scientists&amp;rsquo; computational notebook of choice:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.nature.com/articles/d41586-018-07196-1&#34; target=&#34;_blank&#34;&gt;Perkel, J. M. (2018). Why Jupyter is data scientists&amp;rsquo; computational notebook of choice. Nature, 563(7729), p. 145.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://towardsdatascience.com/bringing-the-best-out-of-jupyter-notebooks-for-data-science-f0871519ca29&#34; target=&#34;_blank&#34;&gt;Pandey, P. (2018). Bringing the best out of Jupyter Notebooks for Data Science. Towards Data Science&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://towardsdatascience.com/jupyter-lab-evolution-of-the-jupyter-notebook-5297cacde6b&#34; target=&#34;_blank&#34;&gt;Pandey, P. (2019). Jupyter Lab: Evolution of the Jupyter Notebook. Towards Data Science&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Now, let&amp;rsquo;s start with some code examples:&lt;/p&gt;

&lt;p&gt;1) &lt;a href=&#34;https://github.com/kirenz/first_steps_in_python/blob/master/1_pandas_import_save_csv.ipynb&#34; target=&#34;_blank&#34;&gt;Import and save CSV-files with Pandas&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2) &lt;a href=&#34;https://github.com/kirenz/first_steps_in_python/blob/master/2_data_tidying_missing_values.ipynb&#34; target=&#34;_blank&#34;&gt;Check for missing values&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3) &lt;a href=&#34;https://github.com/kirenz/first_steps_in_python/blob/master/3_level_of_measurement.ipynb&#34; target=&#34;_blank&#34;&gt;Change data type (level of measurment)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4) &lt;a href=&#34;https://github.com/kirenz/first_steps_in_python/blob/master/4_descriptive_statistics.ipynb&#34; target=&#34;_blank&#34;&gt;Descriptive statistics&lt;/a&gt;
&lt;a href=&#34;https://colab.research.google.com/github/kirenz/first_steps_in_python/blob/master/4_descriptive_statistics.ipynb&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg&#34; alt=&#34;Open In Colab&#34; /&gt;&lt;/a&gt;
&lt;em&gt;&lt;a href=&#34;https://colab.research.google.com/notebooks/welcome.ipynb#scrollTo=5fCEDCU_qrC0&#34; target=&#34;_blank&#34;&gt;Colaboratory&lt;/a&gt; is a free Jupyter notebook environment that requires no setup and runs entirely in the cloud. With Colaboratory you can write and execute code, save and share your analyses, and access powerful computing resources, all for free from your browser:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;5) &lt;a href=&#34;https://github.com/kirenz/first_steps_in_python/blob/master/5_data_science_programming_process.ipynb&#34; target=&#34;_blank&#34;&gt;Overview of the data science programming process&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;recommended-reading&#34;&gt;Recommended reading:&lt;/h2&gt;

&lt;p&gt;&amp;ldquo;&lt;strong&gt;A Whirlwind Tour of Python&lt;/strong&gt;&amp;rdquo; is a free and fast-paced introduction to essential features of the Python language. The material is particularly designed for those who wish to use Python for data science and/or scientific programming:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jakevdp.github.io/WhirlwindTourOfPython/&#34; target=&#34;_blank&#34;&gt;VanderPlas, J. (2016). Whirlwind Tour of Python. O&amp;rsquo;Reilly Media.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
