<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hugo on Jan Kirenz</title>
    <link>/categories/hugo/</link>
    <description>Recent content in hugo on Jan Kirenz</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Jan Kirenz, {year}</copyright>
    <lastBuildDate>Thu, 21 Feb 2019 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="/categories/hugo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Spoonful of Hugo: Page Bundles</title>
      <link>/post/2019-02-21-hugo-page-bundles/</link>
      <pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019-02-21-hugo-page-bundles/</guid>
      <description>


&lt;blockquote&gt;
&lt;p&gt;“Just a spoonful of Hugo helps the blog go down.”
- me, only somewhat kidding&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this series, I’m sharing small spoonfuls of Hugo that I have learned that hopefully can help you get your site &lt;em&gt;UP&lt;/em&gt; (and even better- more efficient, more streamlined, more automated). You can read the previous posts about my “Spoonful of Hugo” series &lt;a href=&#34;/post/2019-02-19-hugo-archetypes/&#34;&gt;about Hugo archetypes&lt;/a&gt; and &lt;a href=&#34;/post/2019-02-19-hugo-netlify-toml/&#34;&gt;Hugo versions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is my third post in this series and it is breaking news.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/dZCdA82qa8d4xVIwm3/giphy.gif&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;hugo-page-bundles&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Hugo Page Bundles&lt;/h1&gt;
&lt;p&gt;Well, not really breaking news, but you still may not know about it! Hugo v0.32 &lt;a href=&#34;https://gohugo.io/news/0.32-relnotes/&#34;&gt;introduced&lt;/a&gt; a new feature called Page Bundles, as a way to organize the content files. Blogdown users rejoice that &lt;a href=&#34;https://twitter.com/dvaughan32&#34;&gt;Davis Vaughn&lt;/a&gt; posted an &lt;a href=&#34;https://github.com/rstudio/blogdown/issues/351&#34;&gt;issue&lt;/a&gt; on the rstudio/blogdown repo to enable this option, which Yihui added shortly before rstudio::conf 2019 🎉. Here is the snippet from the &lt;code&gt;NEWS.md&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“One benefit of using a page bundle instead of a normal page is that you can put resource files associated with the post (such as images) under the same directory of the post itself. This means you no longer have to put them under the &lt;code&gt;static/&lt;/code&gt; directory, which has been quite confusing to Hugo beginners.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What does a blogdown/Hugo site begin to look like without page bundles? I think here is a representative example from &lt;a href=&#34;https://github.com/tidyverse/tidyverse.org/tree/master/content/articles&#34;&gt;tidyverse.org&lt;/a&gt; &lt;em&gt;(sorry tidyverse team- it’s not you, it’s the old Hugo).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For this team, they need an image for every post, which gets out of control pretty fast. Also, some ended up in &lt;a href=&#34;https://github.com/tidyverse/tidyverse.org/tree/master/static/images&#34;&gt;&lt;code&gt;static/&lt;/code&gt;&lt;/a&gt; too, organized by post (which I have done on my own blog, though not well or consistently).&lt;/p&gt;
&lt;p&gt;What would it look like to use page bundles?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;content/
├── about
│   ├── index.md
├── posts
│   ├── 2015-07-23-hi-world
│   │   ├── bakers.csv
│   │   ├── image1.jpg
│   │   ├── image2.png
│   │   └── index.Rmd
│   └── 2015-07-24-bye-world
│       └── index.Rmd&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One could call this bundled file structure “tidier” 🍱.&lt;/p&gt;
&lt;p&gt;In the above, after serving site, &lt;code&gt;index.html&lt;/code&gt; files also get added to the bundle. In Hugo’s terms, these are &lt;a href=&#34;https://gohugo.io/content-management/page-bundles/&#34;&gt;leaf bundles&lt;/a&gt;. The resource files allowed in a bundle include page and non-page items like images, pdf, .csv files, etc.&lt;/p&gt;
&lt;p&gt;This is instead of:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;content/
├── about
│   ├── index.md
├── posts
│   ├── 2015-07-23-hi-world.Rmd
│   ├── bakers.csv
│   ├── image1.jpg
│   ├── image2.png
│   └── 2015-07-24-bye-world.Rmd&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you create a new bundled post, the actual content of the post goes in the index file of a page bundle. So:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# not bundled post
post/2015-07-23-hi-world.Rmd
# bundled post
post/2015-07-24-bye-world/index.Rmd&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;bundle-me-blogdown&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Bundle Me, blogdown!&lt;/h1&gt;
&lt;p&gt;First, read the previous post on setting up a &lt;a href=&#34;post/2019-02-19-hugo-netlify-toml/&#34;&gt;netlify.toml file&lt;/a&gt;. Since using Hugo page bundles depends on Hugo v0.32 or higher, you should go ahead and update hugo then update your netlify.toml with your updated version:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;blogdown::update_hugo()
blogdown::hugo_version()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let’s use the &lt;a href=&#34;https://usethis.r-lib.org/&#34;&gt;&lt;strong&gt;usethis&lt;/strong&gt; package&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;project-specific-.rprofile&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Project-specific .Rprofile&lt;/h2&gt;
&lt;p&gt;First, I’m going to demo here how to create a project-specific .Rprofile file- but know that you can do a user-level .Rprofile file too.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# install.packages(&amp;quot;usethis&amp;quot;) # uncomment this to install
usethis::edit_r_profile(scope = &amp;quot;project&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These helpful messages &lt;em&gt;should&lt;/em&gt; print to your console: please note the “restart” reminder…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; usethis::edit_r_profile(scope = &amp;quot;project&amp;quot;)
● Restart R for changes to take effect
✔ Setting active project to &amp;#39;/Users/alison/rprojs/alison.rbind.io&amp;#39;
● Modify &amp;#39;.Rprofile&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you could add this to your file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# in .Rprofile of the website project
if (file.exists(&amp;quot;~/.Rprofile&amp;quot;)) {
  base::sys.source(&amp;quot;~/.Rprofile&amp;quot;, envir = environment())
}

options(blogdown.new_bundle = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first code chunk above is from the &lt;a href=&#34;https://bookdown.org/yihui/blogdown/global-options.html#global-options&#34;&gt;blogdown book&lt;/a&gt;, where we describe a workaround for loading both user and project .Rprofile files (since R technically only reads one startup profile file).&lt;/p&gt;
&lt;p&gt;If you don’t want this, you could add the blogdown options to your user .Rprofile instead using:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;usethis::edit_r_profile(scope = &amp;quot;user&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Heck, while you are at it, you could set a &lt;em&gt;bunch&lt;/em&gt; of options to make your blogdown life easier:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# in .Rprofile of the website project
if (file.exists(&amp;quot;~/.Rprofile&amp;quot;)) {
  base::sys.source(&amp;quot;~/.Rprofile&amp;quot;, envir = environment())
}

options(
  blogdown.author = &amp;quot;Alison Hill&amp;quot;,
  blogdown.ext = &amp;quot;.Rmd&amp;quot;,
  blogdown.subdir = &amp;quot;post&amp;quot;,
  blogdown.yaml.empty = TRUE,
  blogdown.new_bundle = TRUE,
  blogdown.title_case = TRUE
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the blogdown-specific options, any of these prepopulate content in your “New Post” Addin (I told you to use this &lt;a href=&#34;/post/2019-02-19-hugo-archetypes/&#34;&gt;here&lt;/a&gt;). There is a handy &lt;a href=&#34;https://bookdown.org/yihui/blogdown/global-options.html&#34;&gt;table&lt;/a&gt; from the blogdown book, summarized here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;blogdown.author&lt;/code&gt; = author of new posts&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blogdown.ext&lt;/code&gt; = default extension of new posts (can also be “.md” or “.Rmarkdown”)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blogdown.subdir&lt;/code&gt; = theme-specific, you need to know your theme and content folder here&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blogdown.yaml.empty&lt;/code&gt; = I told you to do that &lt;a href=&#34;/post/2019-02-19-hugo-archetypes/&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blogdown.new_bundle&lt;/code&gt; = what this whole post is about!&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blogdown.title_case&lt;/code&gt; = “nEed More coFFee” –&amp;gt; “Need More Coffee” (it tidies all your post titles to title case)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;the-newline-thing&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Newline Thing&lt;/h2&gt;
&lt;p&gt;Here is a &lt;strong&gt;massive&lt;/strong&gt; .Rprofile gotcha: this file &lt;strong&gt;must&lt;/strong&gt; end with a blank line. So make sure you add an empty line at the end of the file, then save it, and restart your R session.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;restart-r.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Want to make your general R life easier in the future? Follow Yihui’s &lt;a href=&#34;https://yihui.name/en/2018/04/rprofile-trailing-newline/&#34;&gt;advice&lt;/a&gt; and do this in RStudio to ensure that all source files end with a newline:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://db.yihui.name/images/rstudio-newline.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;use-bundles&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Use Bundles&lt;/h1&gt;
&lt;p&gt;After restarting R, try using the “New Post” Addin, this time &lt;em&gt;with feeling&lt;/em&gt;. There is &lt;em&gt;still&lt;/em&gt; one more gotcha though. Use the Addin to create your new bundled post. The only catch is that once you are looking at your exciting new post, you should &lt;strong&gt;delete the slug&lt;/strong&gt; in the YAML (I posted an issue about this &lt;a href=&#34;https://github.com/rstudio/blogdown/issues/370&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The reason is that you want the link to your post to be:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://alison.rbind.io/post/2019-02-21-hugo-page-bundles/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you include the slug, the link to your post will be:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://alison.rbind.io/post/2019-02-21-hugo-page-bundles/hugo-page-bundles&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Another option is to update your &lt;code&gt;config.toml&lt;/code&gt; file with permalinks like &lt;a href=&#34;https://bookdown.org/yihui/blogdown/configuration.html&#34;&gt;Yihui suggests&lt;/a&gt; (but beware: this will change all your past links as well, requiring some &lt;a href=&#34;https://yihui.name/en/2017/11/301-redirect/&#34;&gt;Netlify redirects&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[permalinks]
    post = &amp;quot;/:year/:month/:day/:slug/&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The default here from Hugo was &lt;code&gt;/post/:year-:month-:day-:slug/:slug/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A small note: if you want to add relative links from a blog post to another post in your same blog. So &lt;code&gt;[this](/post/2019-02-19-hugo-archetypes/)&lt;/code&gt; becomes &lt;a href=&#34;/post/2019-02-19-hugo-archetypes/&#34;&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, add images and data files to your ❤️’s content! But you may want to do one more thing…&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;update-metadata&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Update Metadata&lt;/h1&gt;
&lt;p&gt;If you are anything like me, you may draft a blog post then come back to it later. For example, I started this post 2 days ago, but want to publish it today, 2019-06-16. The cool thing that was already built-in to blogdown is the “Update Metadata” Addin. With your blog post open (it should be called &lt;code&gt;index.Rmd&lt;/code&gt;)&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;, click on Addins and select “Update Metadata”. You should see a window like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;update-metadata.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Check the box to rename the file if the date has changed. RStudio will tell you your file has been deleted- which is technically true since the folder was renamed, but don’t panic!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;file-deleted-warning.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Click YES. The &lt;code&gt;index.Rmd&lt;/code&gt; file that is now open should have an updated date field in the YAML. In your RStudio file viewer, you may want to click on “content” at this point then navigate back to view your post- then you will then see that the folder name now has an updated date too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;If no post is open, you will get an error: &lt;code&gt;Warning message: The current document does not seem to contain YAML metadata&lt;/code&gt;&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>A Spoonful of Hugo: The netlify.toml File</title>
      <link>/post/2019-02-19-hugo-netlify-toml/</link>
      <pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019-02-19-hugo-netlify-toml/</guid>
      <description>


&lt;blockquote&gt;
&lt;p&gt;“Just a spoonful of Hugo helps the blog go down.”
- me, only somewhat kidding&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can read the previous post about my “Spoonful of Hugo” series &lt;a href=&#34;/post/2019-02-19-hugo-archetypes/&#34;&gt;here&lt;/a&gt;. In this series, I’m sharing small spoonfuls of Hugo that I have learned that hopefully can help you get your site &lt;em&gt;UP&lt;/em&gt; (and even better- more efficient, more streamlined, more automated).&lt;/p&gt;
&lt;p&gt;This is my second post in this series, and it is a relatively quick one. Just do this. This one is a no-brainer.&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Thanks to &lt;a href=&#34;https://twitter.com/dataandme&#34;&gt;Mara Averick&lt;/a&gt; for alerting me that with Hugo version 0.54.0 and onward, there is a trailing zero at the end of &lt;a href=&#34;https://github.com/gohugoio/hugo/issues/5639&#34;&gt;Hugo versions now&lt;/a&gt;. So for versions before 0.54.0, use the format: 0.53; for later versions use 0.54.0 (0.54 will not work).
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;div id=&#34;use-netlify-to-deploy&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Use Netlify to Deploy&lt;/h1&gt;
&lt;p&gt;First, you’ll need to use Netlify! I am a very happy Netlify user and currently have approximately 33 sites deployed. To setup a new account, navigate to &lt;a href=&#34;https://www.netlify.com/&#34;&gt;Netlify&lt;/a&gt; and click on the &lt;em&gt;Sign Up&lt;/em&gt; link.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://arm.rbind.io/slides/img/netlify-landing.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Sign up with &lt;em&gt;GitHub&lt;/em&gt; to connect your GitHub and Netlify accounts (as shown below).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;netlify-sign-up.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you use a different version control service, select GitLab or BitBucket instead.&lt;/p&gt;
&lt;p&gt;The last step is to use the Netlify UI in browser do &lt;em&gt;New Site from Git&lt;/em&gt; &amp;gt; pick your repo. You’ll be prompted to fill in these fields, they are probably already filled in correctly for you:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;netlify-deploy-settings.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The next part is the advanced build settings:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;netlify-adv-build.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;See that &lt;strong&gt;pro tip&lt;/strong&gt; about the netlify.toml? Let’s do that! You can leave these fields as is.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;why-netlify.toml&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Why netlify.toml?&lt;/h1&gt;
&lt;p&gt;In their &lt;a href=&#34;https://www.netlify.com/docs/build-gotchas/&#34;&gt;&lt;strong&gt;Build Gotchas&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“If your build works locally, the next debugging step is to ensure the package versions we use to build match yours. You can find the settings for these in the &lt;a href=&#34;https://www.netlify.com/docs/build-settings/&#34;&gt;Build Settings&lt;/a&gt; doc. That’s the leading cause of build failure.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yes that is right- package version mismatches are the leading cause of build failure with Netlify. What does this look like for blogdown users? This means that you are running a version of Hugo locally that doesn’t match the version that Netlify is using to build your site. Most of the time, you are using a more recent version of Hugo than the one Netlify uses. This means that the files your theme relies on may be using newer Hugo functions that were introduced in later Hugo versions- functions that Netlify won’t be able to find working from an older Hugo version. You’ll get &lt;em&gt;all the build errors&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;You can check your local Hugo version by running this code in your R console:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;blogdown::hugo_version()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;#39;0.55.6&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we want Netlify to use this same version of Hugo when it builds your site. You can do this two ways:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Do this in your browser (👎)&lt;/li&gt;
&lt;li&gt;Do this in your project root directory in a netlify.toml file (👍)&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;add-the-netlify.toml-file&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Add the netlify.toml File&lt;/h1&gt;
&lt;p&gt;Adding this file means that team members can see for themselves what version of Hugo you are running- if it is buried in the Netlify UI, you can’t see that information unless you sift through the public build logs (no thanks). Making the file as plain text in the root of your blogdown project directory means that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it is version controlled (yay!) and&lt;/li&gt;
&lt;li&gt;other people who use/learn from/contribute to your blog can &lt;em&gt;actually&lt;/em&gt; reproduce your site with the same site configuration.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bonus:&lt;/strong&gt; you can set the Hugo versions for branch deploys too.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is an example from my own &lt;a href=&#34;https://github.com/rbind/apreshill/blob/master/netlify.toml&#34;&gt;netlify.toml&lt;/a&gt; file&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&#34;toml&#34;&gt;&lt;code&gt;[build] 
  publish = &amp;quot;public&amp;quot;
  command = &amp;quot;hugo&amp;quot;

[context.production.environment]
  HUGO_VERSION = &amp;quot;0.54.0&amp;quot; # if older, use format: 0.53 (no trailing zero)
  HUGO_ENV = &amp;quot;production&amp;quot;
  HUGO_ENABLEGITINFO = &amp;quot;true&amp;quot;
  
[context.branch-deploy.environment]
  HUGO_VERSION = &amp;quot;0.54.0&amp;quot; # if older, use format: 0.53 (no trailing zero)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can leave off the last chunk if you don’t want to use &lt;a href=&#34;https://www.netlify.com/blog/2017/11/16/get-full-control-over-your-deployed-branches/&#34;&gt;branch deploys&lt;/a&gt;, but I ❤️ this Netlify feature and encourage you to try it out. I’ve starting drafting individual blog posts and tutorials in branches, and then I can see them rendered and share them for feedback without asking collaborators to clone and build the repository locally. It is &lt;strong&gt;lovely&lt;/strong&gt;. Every branch gets a link 🎉.&lt;/p&gt;
&lt;p&gt;So add this file to your blogdown site repo and push to GitHub.&lt;/p&gt;
&lt;p&gt;Note that, according to the &lt;a href=&#34;https://www.netlify.com/docs/netlify-toml-reference/&#34;&gt;Netlify docs&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“During a build, the following ordering determines which context covers a particular deploy: UI settings are overridden if a netlify.toml file is present in the root folder of the repo and there exists a setting for the same property/redirect/header in the toml file.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you look in your site’s Netlify deploy log, you should see entries like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;7:47:13 PM: Found netlify.toml. Overriding site configuration
7:47:13 PM: Starting build script
7:47:13 PM: Installing dependencies
7:47:14 PM: Started restoring cached node version
7:47:17 PM: Finished restoring cached node version
7:47:18 PM: v8.15.0 is already installed.
7:47:19 PM: Now using node v8.15.0 (npm v6.4.1)
7:47:19 PM: Attempting ruby version 2.3.6, read from environment
7:47:20 PM: Using ruby version 2.3.6
7:47:20 PM: Using PHP version 5.6
7:47:20 PM: Installing Hugo 0.54.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Success!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;the leading zero matters for Hugo versions, so 0.53 works but .53 will not. For versions &amp;gt;= 0.54.0, the trailing zero also matters, so 0.54.0 works but 0.54 will not.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>A Spoonful of Hugo: Archetypes</title>
      <link>/post/2019-02-19-hugo-archetypes/</link>
      <pubDate>Tue, 19 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019-02-19-hugo-archetypes/</guid>
      <description>


&lt;blockquote&gt;
&lt;p&gt;“Just a spoonful of Hugo helps the blog go down.”
- me, only somewhat kidding&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As a happy blogdown user, a common story I hear from other #rstats users is that you try to change one little thing in Hugo, and the whole site breaks. &lt;a href=&#34;https://en.wikipedia.org/wiki/Here_be_dragons&#34;&gt;Here be dragons&lt;/a&gt; for folks who aren’t web developers.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/e/ea/Carta_Marina.jpeg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;I’m here to tell you that there are small spoonfuls of Hugo that can help you get your site &lt;em&gt;UP&lt;/em&gt; (and even better- more efficient, more streamlined, more automated), even if you are not in the least bit interested in transitioning into a career in web development 😏.&lt;/p&gt;
&lt;div id=&#34;my-project&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;My Project&lt;/h1&gt;
&lt;p&gt;The education team at RStudio needs a website and we have a short wishlist:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We want something we can maintain ourselves,&lt;/li&gt;
&lt;li&gt;We want to look consistent with other RStudio sites on the outside, and&lt;/li&gt;
&lt;li&gt;We want to be consistent on the inside so that we can get help if/when we need it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This led me to the current &lt;a href=&#34;https://www.tidyverse.org/&#34;&gt;tidyverse.org&lt;/a&gt; blogdown site. I wanted to make a copy of the site then customize for the education team, but I noticed that the &lt;a href=&#34;https://github.com/tidyverse/tidyverse.org&#34;&gt;source code&lt;/a&gt; for the site didn’t make it easy for me to copy the &lt;em&gt;structure&lt;/em&gt; of the site and edit only the &lt;em&gt;content&lt;/em&gt; of the site. This is one of the real strengths of Hugo, so I embarked on a learning adventure.&lt;/p&gt;
&lt;center&gt;
&lt;iframe src=&#34;https://giphy.com/embed/VGG8UY1nEl66Y&#34; width=&#34;480&#34; height=&#34;392&#34; frameBorder=&#34;0&#34; class=&#34;giphy-embed&#34; allowFullScreen&gt;
&lt;/iframe&gt;
&lt;p&gt;
&lt;a href=&#34;https://giphy.com/gifs/adventure-latin-flinch-VGG8UY1nEl66Y&#34;&gt;via GIPHY&lt;/a&gt;
&lt;/p&gt;
&lt;/center&gt;
&lt;p&gt;As a result, I have been living and breathing Hugo lately. As in, my husband now recognizes &lt;a href=&#34;https://www.mikedane.com/&#34;&gt;Mike Dane’s voice&lt;/a&gt;. You may not have have met Mike yet, but he appears in all the video tutorials in the &lt;a href=&#34;https://gohugo.io/documentation/&#34;&gt;Hugo docs&lt;/a&gt;. His screencasts have been really helpful to me, like this &lt;a href=&#34;https://gohugo.io/templates/introduction/&#34;&gt;one on templating&lt;/a&gt;. I’ve also spent a lot of time actually reading the &lt;a href=&#34;https://gohugo.io/documentation/&#34;&gt;docs&lt;/a&gt; (which are pretty good!), reading posts and answers on the &lt;a href=&#34;https://discourse.gohugo.io/&#34;&gt;Hugo discourse community site&lt;/a&gt;, and spelunking around inside the actual source code for two very well structured Hugo sites:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;The actual &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; site: &lt;a href=&#34;https://github.com/gohugoio/hugoDocs&#34; class=&#34;uri&#34;&gt;https://github.com/gohugoio/hugoDocs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://ropensci.org/&#34;&gt;rOpenSci&lt;/a&gt; site: &lt;a href=&#34;https://github.com/ropensci/roweb2&#34; class=&#34;uri&#34;&gt;https://github.com/ropensci/roweb2&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I’ll be using this post and other later posts to share some of the things I’ve learned about Hugo along the way. Mainly breadcrumbs to myself, but I hope these help other people too.&lt;/p&gt;
&lt;p&gt;For reference, I’m using Hugo via the &lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34;&gt;blogdown R package&lt;/a&gt;, and within the &lt;a href=&#34;https://www.rstudio.com/products/rstudio/#Desktop&#34;&gt;RStudio IDE&lt;/a&gt;. These are my &lt;a href=&#34;https://github.com/rstudio/blogdown&#34;&gt;blogdown&lt;/a&gt; and Hugo versions:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;packageVersion(&amp;quot;blogdown&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;#39;0.12.1&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;blogdown::hugo_version()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;#39;0.55.6&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;tldr-a-teaspoon-of-archetypes&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;tl;dr: A Teaspoon of Archetypes&lt;/h1&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Add custom archetypes as &lt;code&gt;.md&lt;/code&gt; files to your project root directory (do &lt;em&gt;not&lt;/em&gt; touch the &lt;code&gt;archetypes&lt;/code&gt; folder in your &lt;code&gt;themes/archetypes&lt;/code&gt; folder).
&lt;ul&gt;
&lt;li&gt;If you don’t have that as an empty folder in your project root, make one, then add your archetype files to it.&lt;/li&gt;
&lt;li&gt;If you are making a new blogdown site, I recommend using &lt;a href=&#34;https://arm.rbind.io/slides/blogdown.html#start-here&#34;&gt;these options&lt;/a&gt; to &lt;strong&gt;keep your empty directories&lt;/strong&gt;&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(blogdown)
new_site(theme = &amp;quot;jpescador/hugo-future-imperfect&amp;quot;, 
         sample = TRUE, 
         theme_example = TRUE, 
         empty_dirs = TRUE, # this!
         to_yaml = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:proj-wizard&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://arm.rbind.io/slides/img/blogdown-workflow-wizard.png&#34; alt=&#34;Using the RStudio Project Wizard&#34;  /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: Using the RStudio Project Wizard
&lt;/p&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use the “New Post” Addin in RStudio to create &lt;strong&gt;any and all&lt;/strong&gt; new content for your site (not just &lt;em&gt;posts&lt;/em&gt;!). Be sure to use the handy dropdown menu to select from all the possible archetypes. Also, careful about the subdirectory here- some themes use &lt;em&gt;blog&lt;/em&gt;, others use &lt;em&gt;news&lt;/em&gt;, &lt;em&gt;articles&lt;/em&gt;, or &lt;em&gt;posts&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://arm.rbind.io/slides/img/blogdown-newpost-bundle.png&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Your archetypes, while only markdown files, &lt;em&gt;can&lt;/em&gt; include R code. When you use the Addin, be sure to choose &lt;code&gt;R Markdown (.Rmd)&lt;/code&gt; as the format so that you can run the code.
&lt;ul&gt;
&lt;li&gt;Don’t miss this &lt;a href=&#34;http://lcolladotor.github.io/2018/03/08/blogdown-archetype-template/&#34;&gt;great blog post&lt;/a&gt; by my friend and the great educator &lt;a href=&#34;https://twitter.com/fellgernon&#34;&gt;Leo Collado-Torres&lt;/a&gt; on archetypes.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;a-tablespoon-of-archetypes&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;A Tablespoon of Archetypes&lt;/h1&gt;
&lt;p&gt;One of the easiest things you can do for yourself is customize your site’s archetypes. From the &lt;a href=&#34;https://gohugo.io/content-management/archetypes/&#34;&gt;Hugo docs&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Archetypes are templates used when creating new content.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Right away when I cloned the tidyverse site, I noticed that there were instructions for how to contribute a new article (or blog post) in the &lt;a href=&#34;https://github.com/tidyverse/tidyverse.org/blob/c0eb070017cab794029b8ed3ac518f6e1a245a2b/README.md&#34;&gt;&lt;code&gt;README.md&lt;/code&gt;&lt;/a&gt; and in a separate &lt;a href=&#34;https://github.com/tidyverse/tidyverse.org/blob/c0eb070017cab794029b8ed3ac518f6e1a245a2b/CONTRIBUTING.md&#34;&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt; file. Then I noticed this &lt;a href=&#34;https://github.com/tidyverse/tidyverse.org/issues/113&#34;&gt;open GitHub issue&lt;/a&gt; from &lt;a href=&#34;https://twitter.com/dataandme&#34;&gt;Mara Averick&lt;/a&gt; (the tidyverse developer advocate) titled “Fix README/CONTRIBUTING so there’s one source of mechanical info?”.&lt;/p&gt;
&lt;p&gt;I also noticed that there was no project root folder called &lt;code&gt;archetypes&lt;/code&gt;, which is where you would store your custom site archetype files as &lt;code&gt;.md&lt;/code&gt; files. In fact, there is no &lt;strong&gt;theme&lt;/strong&gt; folder as you might expect either, which is where you could view the default theme archetypes. Let’s look at some from other Hugo themes:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;The default Hugo theme for blogdown, &lt;a href=&#34;https://github.com/yihui/hugo-lithium&#34;&gt;Lithium&lt;/a&gt;, has just one archetype: &lt;a href=&#34;https://github.com/yihui/hugo-lithium/tree/master/archetypes&#34;&gt;&lt;code&gt;default.md&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;yaml&#34;&gt;&lt;code&gt;---
title: &amp;#39;&amp;#39;
date: &amp;#39;&amp;#39;
---&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In contrast, the &lt;a href=&#34;https://github.com/gcushen/hugo-academic&#34;&gt;Hugo Academic theme&lt;/a&gt; has A LOT: &lt;a href=&#34;https://github.com/gcushen/hugo-academic/tree/master/archetypes&#34; class=&#34;uri&#34;&gt;https://github.com/gcushen/hugo-academic/tree/master/archetypes&lt;/a&gt;; here is the content of the one for new posts:&lt;/p&gt;
&lt;pre class=&#34;toml&#34;&gt;&lt;code&gt;+++
title = &amp;quot;{{ replace .Name &amp;quot;-&amp;quot; &amp;quot; &amp;quot; | title }}&amp;quot;
subtitle = &amp;quot;&amp;quot;

# Add a summary to display on homepage (optional).
summary = &amp;quot;&amp;quot;

date = {{ .Date }}
draft = false

# Authors. Comma separated list, e.g. `[&amp;quot;Bob Smith&amp;quot;, &amp;quot;David Jones&amp;quot;]`.
authors = []

# Tags and categories
# For example, use `tags = []` for no tags, or the form `tags = [&amp;quot;A Tag&amp;quot;, &amp;quot;Another Tag&amp;quot;]` for one or more tags.
tags = []
categories = []

# Projects (optional).
#   Associate this post with one or more of your projects.
#   Simply enter your project&amp;#39;s folder or file name without extension.
#   E.g. `projects = [&amp;quot;deep-learning&amp;quot;]` references 
#   `content/project/deep-learning/index.md`.
#   Otherwise, set `projects = []`.
# projects = [&amp;quot;internal-project&amp;quot;]

# Featured image
# To use, add an image named `featured.jpg/png` to your page&amp;#39;s folder. 
[image]
  # Caption (optional)
  caption = &amp;quot;&amp;quot;

  # Focal point (optional)
  # Options: Smart, Center, TopLeft, Top, TopRight, Left, Right, BottomLeft, Bottom, BottomRight
  focal_point = &amp;quot;&amp;quot;
+++&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A quick note: you may have noticed differences in both the content between these two files but also the structure. The first is a &lt;a href=&#34;https://learnxinyminutes.com/docs/yaml/&#34;&gt;YAML file&lt;/a&gt;, the second is a &lt;a href=&#34;https://learnxinyminutes.com/docs/toml/&#34;&gt;TOML file&lt;/a&gt;. For blogdown users, you may want to use YAML. This is also why I recommend when you set up your site to use the &lt;code&gt;to_yaml = TRUE&lt;/code&gt; option (in the Project Wizard from figure &lt;a href=&#34;#fig:proj-wizard&#34;&gt;1&lt;/a&gt;, check the “Convert all metadata to YAML” box; otherwise, the exampleSite will contain TOML instead of YAML)&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you read the original tidyverse &lt;a href=&#34;https://github.com/tidyverse/tidyverse.org/blob/c0eb070017cab794029b8ed3ac518f6e1a245a2b/CONTRIBUTING.md&#34;&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt; file, the instructions include a fair bit of R code that I would guess means a lot of copying and pasting into new posts. For example, the R Markdown setup chunk and the code for using &lt;code&gt;usethis::use_tidy_thanks()&lt;/code&gt; for package releases. I studied the contributing guidelines, and parsed three different “kinds” of articles that are commonly contributed, each with a different archetype:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;default.md&lt;/code&gt;- this is just for plain old markdown posts and basically sets up the YAML of the post to be the same as it is now (currently, there is no archetype dictating the content- it is pulling from a project-level &lt;a href=&#34;https://github.com/tidyverse/tidyverse.org/blob/master/.Rprofile&#34;&gt;.Rprofile&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A &lt;code&gt;default-rmarkdown.md&lt;/code&gt; which should only be used with an R Markdown post and provides only the setup chunk at the top.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A &lt;code&gt;package-release.md&lt;/code&gt; which also should only be used with an R Markdown post and adds the &lt;code&gt;usethis::use_tidy_thanks()&lt;/code&gt; code chunk (this is pseudo-code so the default chunk option is set to &lt;code&gt;eval = FALSE&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So I drafted a &lt;a href=&#34;https://github.com/tidyverse/tidyverse.org/pull/271&#34;&gt;pull request&lt;/a&gt; that adds &lt;a href=&#34;https://github.com/tidyverse/tidyverse.org/pull/271/commits/26a07ae881e57607e25ef0add77d0f5958a9c143&#34;&gt;these three archetypes&lt;/a&gt; to the &lt;a href=&#34;https://github.com/tidyverse/tidyverse.org&#34;&gt;GitHub repository&lt;/a&gt; for the &lt;a href=&#34;https://www.tidyverse.org/&#34;&gt;tidyverse.org&lt;/a&gt;. Here is the “after” Addin view:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;archetypes-after.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here’s hoping Hugo archetypes make some things about adding new content to your site easier. There is no Hugo involved, other than realizing that Hugo will look first in your &lt;code&gt;themes/&amp;lt;THEME-NAME&amp;gt;/archetypes/&lt;/code&gt; folder, then in your project root &lt;code&gt;archetypes/&lt;/code&gt; folder next. &lt;a href=&#34;https://twitter.com/apreshill/status/1083791211222073344&#34;&gt;DO&lt;/a&gt; &lt;a href=&#34;https://twitter.com/apreshill/status/1078494406301212672&#34;&gt;NOT&lt;/a&gt; &lt;a href=&#34;https://arm.rbind.io/slides/blogdown.html#35&#34;&gt;TOUCH&lt;/a&gt; any files in your &lt;code&gt;themes/&lt;/code&gt; directory.&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You may want to set up archetypes for your blogdown site if you have a “signature” R setup chunk that loads your preferred &lt;code&gt;knitr&lt;/code&gt; chunk options, common libraries you always load at setup like &lt;code&gt;tidyverse&lt;/code&gt;, &lt;code&gt;ggplot2&lt;/code&gt; themes you prefer (&lt;code&gt;theme_minimal()&lt;/code&gt; FTW), etc. This may be especially helpful if you have multiple team members contributing to a single site and you want their posts to have a uniform setup. Then archetypes can be a real time- and sanity-saver. Get more ideas from Leo’s &lt;a href=&#34;http://lcolladotor.github.io/2018/03/08/blogdown-archetype-template/&#34;&gt;blog post&lt;/a&gt; on archetypes. You &lt;em&gt;can&lt;/em&gt; also make &lt;a href=&#34;https://gohugo.io/content-management/archetypes/#directory-based-archetypes&#34;&gt;directory based archetypes&lt;/a&gt; if you use Hugo page bundles, which is a topic of a future post.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;These setup options are newish to the blogdown package: &lt;a href=&#34;https://github.com/rstudio-education/arm-workshop-rsc2019/issues/8&#34; class=&#34;uri&#34;&gt;https://github.com/rstudio-education/arm-workshop-rsc2019/issues/8&lt;/a&gt;&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;If you end up with TOML in your content files, run this R code: &lt;code&gt;hugo_convert(to = &amp;quot;YAML&amp;quot;, unsafe = TRUE)&lt;/code&gt;&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;Trust me on this one- if you ever want to update your site this will make that process way harder.&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
